name: Deploy Test Ci

on:
  push:
    branches:
      - dev 
      - main  # Деплой dev окружения
  pull_request:
    types: [closed]
    branches:
      - main   # Деплой prod только при merge в master

jobs:
  deploy-dev:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    name: Deploy Development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Development Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Переходим в директорию dev окружения
            cd /home/temur/test-ci-dev
            
            # Останавливаем текущий контейнер если запущен
            docker compose -p dev down || true
            
            # Обновляем код
            git fetch origin
            git reset --hard origin/dev
            
            # Собираем и запускаем новый контейнер
            docker compose -p dev up --build -d
            
            # Очищаем неиспользуемые образы
            docker image prune -f

  deploy-prod:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master'
    runs-on: ubuntu-latest
    name: Deploy Production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Переходим в директорию prod окружения
            cd /home/temur/test-ci
            
            # Останавливаем текущий контейнер если запущен
            docker compose -p prod down || true
            
            # Обновляем код
            git fetch origin
            git reset --hard origin/main
            
            # Собираем и запускаем новый контейнер
            docker compose -p prod up --build -d
            
            # Очищаем неиспользуемые образы
            docker image prune -f